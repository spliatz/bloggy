basePath: /
definitions:
  dto.CreatePostDTO:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  dto.CreateUserDTO:
    properties:
      birthday:
        description: Use "2000-12-31" format
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.EditUserDTO:
    properties:
      birthday:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  dto.GetByCredentialsDTO:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LogoutDTO:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  dto.RefreshDTO:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  entity.CreatePostResponse:
    properties:
      id:
        type: integer
    type: object
  entity.Post:
    properties:
      author_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
    type: object
  entity.UserResponseSwagger:
    properties:
      birthday:
        type: string
      created_at:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  response.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: backend for Bloggy (open source twitter-like app)
  title: Bloggy-backend
  version: "1.0"
paths:
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: logout user session
      operationId: logout
      parameters:
      - description: refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: get new access and refresh token
      operationId: get-new-access-and-refresh-token
      parameters:
      - description: refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: account username and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.GetByCredentialsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: SignIn
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: SignUp
      tags:
      - auth
  /post:
    post:
      consumes:
      - application/json
      description: create post
      operationId: create-post
      parameters:
      - description: post information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CreatePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: CreatePost
      tags:
      - post
  /post/{id}:
    delete:
      consumes:
      - application/json
      description: delete post
      operationId: delete-post-by-id
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: DeletePostById
      tags:
      - post
    get:
      consumes:
      - application/json
      description: get post
      operationId: get-post-by-id
      parameters:
      - description: post id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: GetPostById
      tags:
      - post
  /user:
    patch:
      consumes:
      - application/json
      description: login
      operationId: edit-user-by-username
      parameters:
      - description: user information
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.EditUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: EditUserByUsername
      tags:
      - user
  /user/{username}:
    get:
      consumes:
      - application/json
      description: get user by username
      operationId: get-user-by-username
      parameters:
      - description: User username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: GetUserByUsername
      tags:
      - user
  /user/{username}/posts:
    get:
      consumes:
      - application/json
      description: Get All User's Posts
      operationId: get-all-by-username
      parameters:
      - description: User username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: GetAllByUsername
      tags:
      - user
  /user/my:
    get:
      consumes:
      - application/json
      description: get my user info
      operationId: get-my
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: GetUserByUsername
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
